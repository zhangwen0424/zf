{
  "version": 3,
  "sources": ["../src/parser.ts", "../src/index.ts"],
  "sourcesContent": ["import { NodeTypes } from \"./ast\";\n\n// \u521B\u5EFA\u884C\u5217\u4E0A\u4E0B\u6587\uFF0C\u5B58\u50A8\u884C\u5217\u53F7\u3001\u6A21\u7248\u5185\u5BB9\nfunction createParserContext(template) {\n  return {\n    line: 1, //\u884C\u53F7\n    column: 1, // \u5217\u53F7\n    offset: 0, // \u504F\u79FB\u91CF\n    source: template, // \u4F1A\u4E0D\u505C\u5730\u88AB\u622A\u53D6 \u76F4\u5230\u5B57\u7B26\u4E32\u4E3A\u7A7A\u7684\u65F6\u5019\n    originalSource: template, // \u539F\u59CB\u5185\u5BB9\n  };\n}\n\n// \u5FAA\u73AF\u904D\u5386\u6A21\u677F\u7684\u7EC8\u6B62\u6761\u4EF6\uFF0C\u5982\u679C\u4E3A\u7A7A\u8BF4\u660E\u904D\u5386\u5B8C\u6BD5\nfunction isEnd(context) {\n  const source = context.source;\n  return !source; // \u6700\u7EC8\u622A\u53D6\u5230\u7A7A\u5B57\u7B26\u4E32\uFF0C\u505C\u6B62\u622A\u53D6\n}\n\n// \u8BA1\u7B97\u4EE3\u7801\u4F4D\u7F6E\nfunction getSelection(context, start, end?) {\n  end = getCursor(context);\n  return {\n    start,\n    end,\n    source: context.originalSource.slice(start.offset, end.offset),\n  };\n}\n\n// \u83B7\u53D6\u5F53\u524D\u6E38\u6807\nfunction getCursor(context) {\n  let { line, column, offset } = context;\n  return { line, column, offset };\n}\n\n// \u5904\u7406\u6362\u884C\u6E38\u6807\nfunction advancePositionWithMutation(context, source, endIndex) {\n  let linesCount = 0; // \u8BA1\u7B97\u7ECF\u8FC7\u591A\u5C11\u884C  \\n\n  let linePos = -1; // \u9047\u5230\u6362\u884C\u6807\u8BB0\u6362\u884C\u7684\u5F00\u59CB\u4F4D\u7F6E\n  // \u6839\u636E\u7ED3\u675F\u7D22\u5F15\u904D\u5386\u5185\u5BB9\uFF0C\u770B\u4E00\u4E0B\u7ECF\u5386\u4E86\u591A\u5C11\u4E2A\\n\u5B57\u7B26\n  for (let i = 0; i < endIndex; i++) {\n    if (source[i].charCodeAt(0) === 10) {\n      // \u5C31\u662F\u6362\u884C\n      linesCount++;\n      linePos = i;\n    }\n  }\n  console.log(linesCount, linePos);\n  context.line += linesCount;\n  context.offset += endIndex;\n  context.column =\n    linePos == -1 ? context.column + endIndex : endIndex - linePos;\n}\n\n// \u524D\u8FDB\u4E00\u6B65\uFF0C\u5220\u9664\u5DF2\u7ECF\u89E3\u6790\u7684\u5185\u5BB9\uFF0C\u524D\u8FDB\u662F\u5220\u9664\u89E3\u6790\nfunction advanceBy(context, endIndex) {\n  let source = context.source;\n  advancePositionWithMutation(context, source, endIndex); //\u8BB0\u5F55\u884C\u53F7\n  // \u5220\u9664\u89E3\u6790\u540E\u7684\u5185\u5BB9\n  context.source = source.slice(endIndex);\n}\n\n// \u524D\u8FDB\uFF0C\u5220\u9664\u7A7A\u683C\nfunction advanceBySpaces(context) {\n  return \"\";\n}\n\n// \u622A\u53D6\u6587\u672C\u5185\u5BB9\nfunction parseTextData(context, endIndex) {\n  const content = context.source.slice(0, endIndex);\n  // \u622A\u53D6\u540E\u9700\u8981\u5C06context.source\u4E2D\u7684\u5185\u5BB9\u5220\u9664\u6389\uFF0C\u5220\u9664\u5DF2\u7ECF\u89E3\u6790\u7684\u5185\u5BB9\n  advanceBy(context, endIndex);\n  return content;\n}\n\n// \u5904\u7406\u6587\u672C\nfunction parseText(context) {\n  // \u5982\u4F55\u8BA1\u7B97\u6587\u672C\u7684\u7ED3\u675F\u4F4D\u7F6E\n  // \u5047\u8BBE\u6CD5\u6C42\u672B\u5C3E\u7684\u7D22\u5F15\uFF0C\u5F97\u5230\u8DDD\u79BB\u81EA\u5DF1\u6700\u8FD1\u7684 < \u6216\u8005 {{ \u5C31\u7ED3\u675F\u561E\n  let endTokens = [\"<\", \"{{\"]; // \u6587\u672C\u7ED3\u675F\u7684\u8BED\u6CD5\n  let endIndex = context.source.length; // \u9ED8\u8BA4\u672B\u5C3E\u662F\u662F\u6700\u540E\u4E00\u4F4D\n  let start = getCursor(context);\n\n  for (let i = 0; i < endTokens.length; i++) {\n    // \u56E0\u4E3A\u5F00\u5934\u80AF\u5B9A\u662F\u6587\u672C\uFF0C\u6240\u4EE5\u7B2C\u4E00\u4E2A\u5B57\u7B26\u80AF\u5B9A\u4E0D\u662F < {{, \u4ECE\u4E0B\u4E00\u4E2A\u5F00\u59CB\u67E5\u627E\n    const index = context.source.indexOf(endTokens[i], 1);\n    // \u627E\u5230\u6700\u8FD1\u7ED3\u675F\u7684\u4F4D\u7F6E\n    if (index > -1 && index < endIndex) {\n      // \u6CA1\u5230\u7ED3\u5C3E\u5C31\u9047\u5230\u4E86 {{  <\n      endIndex = index; // \u7528\u6700\u8FD1\u7684\u4F5C\u4E3A \u6211\u4EEC\u7684\u7ED3\u5C3E\n    }\n  }\n  // context \u662F\u5F53\u524D\u6B63\u5728\u89E3\u6790\u7684\u5185\u5BB9\uFF0C\u6240\u4EE5\u4E0D\u7528\u8003\u8651startIndex\n  const content = parseTextData(context, endIndex); //\u622A\u53D6\u6587\u672C\u5185\u5BB9\n  return {\n    type: NodeTypes.TEXT, // \u7C7B\u578B\uFF1A\u6587\u672C\n    content, // \u6587\u672C\u5185\u5BB9\n    loc: getSelection(context, start), // \u8BA1\u7B97\u4EE3\u7801\u5F00\u59CB\u7ED3\u675F\u4F4D\u7F6E\uFF0C\u62A5\u9519\u4F4D\u7F6E\n  };\n}\n\n// \u5904\u7406\u8868\u8FBE\u5F0F{{}}, \u5148\u53BB\u6389\u524D\u9762{{\uFF0C\u518D\u53BB\u6389\u540E\u9762}}\uFF0C\u62FF\u5230\u6587\u672C\nfunction parserInterpolation(context) {\n  const start = getCursor(context); // \u8868\u8FBE\u5F0F\u7684\u5F00\u59CB\u4FE1\u606F\n  const clonseIndex = context.source.indexOf(\"}}\", 2); // \u83B7\u53D6\u5927\u62EC\u53F7\u7684\u7ED3\u675F\u4F4D\u7F6E\n\n  advanceBy(context, 2); // \u5220\u9664\u561E {{  \u81EA\u52A8\u66F4\u65B0\u884C\u5217\u4FE1\u606F\n\n  const innerStart = getCursor(context); // \u8868\u8FBE\u5F0F\u5185\u90E8\u5F00\u59CB\u7684\u4F4D\u7F6E\n  const rawContentEndIndex = clonseIndex - 2; // \u83B7\u53D6\u539F\u59CB\u7528\u6237\u5927\u62EC\u53F7\u4E2D\u7684\u5185\u5BB9\u957F\u5EA6\n\n  // \u83B7\u53D6\u53BB\u7A7A\u683C\u662F\u4E4B\u524D\u7684\u5185\u5BB9\n  const preTrimContent = parseTextData(context, rawContentEndIndex);\n  const innerEnd = getCursor(context);\n  const content = preTrimContent.trim(); // \u53BB\u6389\u5185\u5BB9\u7684\u7A7A\u683C\n\n  advanceBy(context, 2); // \u53BB\u6389 }}\n\n  return {\n    type: NodeTypes.INTERPOLATION,\n    content: {\n      type: NodeTypes.SIMPLE_EXPRESSION,\n      isStatic: false,\n      content, // \u5185\u5BB9 **\n      loc: getSelection(context, innerStart, innerEnd), // \u6709\u70B9\u5C0Fbug\n    },\n    loc: getSelection(context, start),\n  };\n}\n\n// \u5904\u7406\u5143\u7D20\nfunction parserElement(context) {\n  // let node =\n}\n\n// \u5904\u7406\u6807\u7B7E\nfunction parserTag(context) {\n  const start = getCursor(context);\n  // match 1) \u5339\u914D\u51FA\u6765\u7684\u662F\u5B8C\u6574\u7684\u5B57\u7B26\u4E32  <div></div>  match[0] = <div\n  // 2) \u7B2C\u4E00\u4E2A\u5206\u7EC4\n  const match = /^<\\/?([a-z][^ \\t\\r\\n/>]*)/.exec(context.source);\n  const tag = match[1]; //'div'\n  advanceBy(context, match[0].length); // <div\n  advanceBySpaces(context);\n\n  //\n}\n\n// \u89E3\u6790\u4E0A\u4E0B\u6587\nfunction parseChilren(context) {\n  const nodes = [];\n  while (!isEnd(context)) {\n    const s = context.source; // \u83B7\u53D6\u5F53\u524D\u7684\u5185\u5BB9\n    let node; // \u5F53\u524D\u5904\u7406\u7684\u8282\u70B9\n    if (s[0] === \"<\") {\n      node = parserTag(context);\n    } else if (s.startsWith(\"{{\")) {\n      // \u6211\u4EEC\u53EF\u4EE5\u5BF9\u8868\u8FBE\u5F0F\u8FDB\u884C\u5904\u7406\n      node = parserInterpolation(context);\n    }\n    if (!node) {\n      // \u8FD9\u4E2A\u4E1C\u897F\u5C31\u662F\u6587\u672C\n      node = parseText(context);\n    }\n    nodes.push(node);\n    break;\n  }\n  // context \u662F\u5F53\u524D\u6B63\u5728\u89E3\u6790\u7684\u5185\u5BB9\uFF0C\u6240\u4EE5\u4E0D\u7528\u8003\u8651startIndex\n  return nodes;\n}\n\n// \u89E3\u6790\u5B57\u7B26\u4E32\nexport function parser(template) {\n  // \u89E3\u6790\u7684\u65F6\u5019 \u89E3\u6790\u4E00\u70B9\u5220\u9664\u4E00\u70B9,\u89E3\u6790\u7684\u7EC8\u6B62\u6761\u4EF6\u662F\u6A21\u677F\u7684\u5185\u5BB9\u6700\u7EC8\u4E3A\u7A7A\n  // \u72B6\u6001\u673A , \u6709\u9650\u72B6\u6001\u673A\u3002\u627E\u5230\u6BCF\u4E00\u4E2A\u5B57\u7B26\u4E32\u8FDB\u884C\u5904\u7406\n  const context = createParserContext(template);\n\n  return parseChilren(context); // \u8FD4\u56DE\u4E0A\u4E0B\u6587\u5185\u5BB9\n}\n", "import { parser } from \"./parser\";\n\n// \u628A\u6A21\u7248\u8F6C\u5316\u4E3A\u8BED\u6CD5ast\u6811\nexport function compile(template) {\n  return parser(template);\n}\n"],
  "mappings": "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",
  "names": []
}
