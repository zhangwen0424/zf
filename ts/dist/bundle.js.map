{"version":3,"file":"bundle.js","sources":["../src/笔试.ts"],"sourcesContent":["/******************* 元素交换 ****************/\n// 元祖交换\nfunction swap1(tuple: [number, string]): [string, number] {\n  return [tuple[1], tuple[0]];\n}\nconsole.log(swap1([1, \"a\"]));\n// 泛型实现数组元素交换\nfunction swap2<T, U>(tuple: [T, U]): [U, T] {\n  return [tuple[1], tuple[0]];\n}\nconsole.log(swap2([\"a\", 112]));\n// 接口实现\n// type swapType = <T, U>(tuple: [T, U]) => [U, T];\ninterface swapType {\n  <T, U>(tuple: [T, U]): [U, T];\n}\nconst swap3: swapType = (tuple) => {\n  return [tuple[1], tuple[0]];\n};\nconsole.log(swap3([1, \"223\"]));\n\n/******************* 数组的声明 ****************/\n\ninterface MyArray<T> {\n  length: number;\n\n  // 添加\n  push(...args: T[]): number;\n  unshift(...args: T[]): number;\n\n  // 删除\n  pop(): T | undefined;\n  shift(): T | undefined;\n  splice(start?: number, deleteNum?: number): T[];\n  splice(start: number, deleteNum?: number): T[];\n  splice(start: number, deleteNum: number, ...args: T[]): T[];\n\n  // 遍历\n  forEach(\n    callbackFn: (value: T, index: number, array: T[]) => void,\n    thisArg?: any\n  ): void;\n  reduce(\n    callbackFn: (preVal: T, curVal: T, curIndex: number, arr: T[]) => T,\n    initialVal: T\n  ): T[];\n  // reduceRight\n  // map\n  // some\n  // every\n}\n"],"names":[],"mappings":";;;EAAA;EACA;EACA,SAAS,KAAK,CAAC,KAAuB,EAAA;MACpC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EAC7B;EACA,SAAS,KAAK,CAAO,KAAa,EAAA;MAChC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EAM/B,MAAM,KAAK,GAAa,CAAC,KAAK,KAAI;MAChC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;EACF,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;;;;;"}